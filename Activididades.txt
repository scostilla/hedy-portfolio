A- FUNCIONANDO
Crear un script que al presionar un boton 
despliegue en la pantalla la imagen de una cara aleatoria de
un dado de 6 caras.
OPCIONAL:
Renderizar un mensaje que
indique el valor de la cara del 
dado desplegada en el momento.

B- FUNCIONANDO
Usar un componente de clase para renderizar un mensaje de bienvenida y
un nombre. 

C- FUNCIONANDO
Crear un componente usuarios que contenga 3 usuarios (ID,nombre,apellido) 
Desplegarlos en la pagina

D- REVISAR ARCHIVO UserFunction.js EL ELEMENTO props
Desplegar en la pagina el componente de la clase anterior PERO:
1-rescribiendolo como componente de función. 
2-pasandole un prop a por lo menos 1 de los elementos a travez del componente padre.

E-
1-Crear un componente que renderize la marca de un auto, un contador, y un boton.
2-Al hacer click en la marca del auto, el componente se tiene que poder re renderizar
y mostrar otra marca a eleccion del programador.
3-Al hacer click en el boton, al contador se le tiene que sumar un numero aleatorio
entre un valor minimo y maximo a eleccion del programador.
(OPCIONAL:)
4- renderizar todos los elementos de 
un componente reactivo que sea una lista 
a eleccion del programador
(tiene que usar useState)

F-
Crear una api de prueba, 
extraer datos de la misma con funciones asincronicas o promesas,
renderizar estos datos (Pueden usar funciones como map o filter)
OPCIONAL: darle un poco de css a la aplicacion web.

G-
1-Hacer un ABM (no funcional) que se renderize o no 
en base al click de un boton que este en el elemento padre
2- Cambiar el css de este abm en base al click de un boton 
(puede estar en el componente del abm o en el padre)

H-
1-Crear una API que tenga por lo menos 5 objetos (no pueden ser usuarios)
y que cada uno de esos objetos tenga por lo menos 3 propiedades.
2-crear un metodo get que reciba la informacion de alguno de esos 5 objetos
y renderizarlo totalmente en la pagina
3-crear un metodo post que cargue la informacion de un objeto en la API
con el mismo template que se uso para crear los otros objetos y 
renderizar en la pagina la informacion que se cargo.
4-Crear un metodo delete que borre alguno de los objetos de la API
y que renderize en la pagina la id o algun identificador del objeto borrado.

I-
Tomar datos de la api https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=6&page=1&sparkline=false
Y renderizar el nombre, simbolo, precio actual, MCR, MC e imagen de todos los objetos utilizando AXIOS.
opcional: Utilizar CSS para desplegar los datos de una forma ordenada
¡Muy importante! Recordar que si hacemos un get de toda la api
vamos a recibir un objeto iterable, probablemente querramos
utilizar una funcion como map para renderizar correctamente
nuestro componente